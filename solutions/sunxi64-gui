#!/bin/bash
IMAGE_TOTAL_SIZE=16000
DUAL_PARTITION=1
FIRST_PARTITION_SIZE=128

FIRST_PARTITION_TYPE=vfat
SECOND_PARTITION_TYPE=btrfs
SECOND_PARTITION_MOUNT_OPTIONS="compress=zstd"

DEPENDENCIES="uboot-tools wget"

if [ ! "$MMC" ] || [ "$MMC" = "0" ]; then
	MMC=0 # SD Card
	IMAGE_NAME_EXTRA="_sd"
elif [ "$MMC" = "2" ]; then
	IMAGE_NAME_EXTRA="_emmc"
else
	echo "Wrong MMC variable"
	exit 1
fi

case "$DEVICE_NAME" in
sun50i-h6*)
	DEBUG_UART=0x05000000
	;;
sun50i-a64*|sun50i-h5*)
	DEBUG_UART=0x01c28000
	;;
*)
	echo "Wrong DEVICE_NAME: $DEVICE_NAME"
	exit 1
	;;
esac

# Note: needs a TARBALL environment variable

do_fill_image() {
	pushd p2
		echo "Unpacking system distribution ..."
		tar xfpa "${TARBALL}" --strip-components=1

		echo "Generating aosc-arm.conf ..."
		mkdir -p etc/
		echo "/dev/mmcblk${MMC}p2 / btrfs compress=zstd,ssd 1 1" >> etc/fstab
		echo "DEVICE_NAME=$DEVICE_NAME" > etc/aosc-arm.conf
		echo "FLASHER_SOLUTION=sunxi64" >> etc/aosc-arm.conf
		echo "SUNXI_FIRMWARE_DEVICE=/dev/mmcblk${MMC}" >> etc/aosc-arm.conf
		echo "SUNXI_KERNEL_DEVICE=/dev/mmcblk${MMC}p1" >> etc/aosc-arm.conf

		# For u-boot-aosc-utils
		echo "Downloading u-boot configurations ..."
		mkdir -p etc/default
		if [ "$MMC" = "2" ]; then
			wget https://github.com/AOSC-Dev/u-boot-aosc-utils/raw/a8be97782ef56ded95f2f51a145f070aab457e2c/presets/sunxi64-mmc2 -O etc/default/u-boot
		else
			wget https://github.com/AOSC-Dev/u-boot-aosc-utils/raw/a8be97782ef56ded95f2f51a145f070aab457e2c/presets/sunxi64 -O etc/default/u-boot
		fi

		case $DEVICE_NAME in
		sun50i-a64-pine64*)
			echo "Disabling random MAC address as a quirk ..."
			echo >> etc/NetworkManager/NetworkManager.conf
			echo "[device]">> etc/NetworkManager/NetworkManager.conf
			echo "wifi.scan-rand-mac-address=no" >> etc/NetworkManager/NetworkManager.conf
			;;
		esac
	popd
	pushd p1
		echo "Deploying Kernel image ..."
		cp -v ../p2/usr/lib/aosc-os-arm64-sunxi-boot/linux-kernel-sunxi64/Image .
		cp -v ../p2/usr/lib/aosc-os-arm64-sunxi-boot/dtb-${DEVICE_NAME}/dtb.dtb .

		echo "Generating boot.cmd ..."
		cat > boot.cmd << EOF
load mmc \${mmc_bootdev}:1 40080000 Image
load mmc \${mmc_bootdev}:1 4fa00000 dtb.dtb
setenv bootargs console=ttyS0,115200n8 console=tty0 rw root=/dev/mmcblk${MMC}p2 rootwait earlycon=uart,mmio32,${DEBUG_UART}
booti 40080000 - 4fa00000
EOF

		echo "Generating boot.scr ..."
		mkimage -C none -A arm -T script -d boot.cmd boot.scr
	popd

	echo "Writing boot partitions ..."
	dd if="p2/usr/lib/aosc-os-arm64-sunxi-boot/u-boot-${DEVICE_NAME}/u-boot-sunxi-with-spl.bin" of="${IMAGE_DEVICE}" bs=1024 seek=8
}
