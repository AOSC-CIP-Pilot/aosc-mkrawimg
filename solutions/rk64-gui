#!/bin/bash
IMAGE_TOTAL_SIZE=16000

THIRD_PARTITION_TYPE=vfat
FOURTH_PARTITION_TYPE=btrfs
FOURTH_PARTITION_MOUNT_OPTIONS="compress=zstd"

DEPENDENCIES="uboot-tools wget gptfdisk"

function GDISK_COMMANDS() {
    # alignment 64, partition 1: 64 to 16383, type 8301 (Linux reserved)
    # alignment 64, partition 2: 16384 to 32767, type 8301 (Linux reserved)
    # alignment 64, partition 3: 32768 to 262143, type ef00 (EFI System Partition)
    # alignment 64, partition 4: 32768 to end, type 8305 (Linux root [arm-64])
    sgdisk -a 64 -n1:64:16383 -t1:8301 \
		-n2:16384:32767 -t2:8301 \
		-n3:32768:262143 -t3:ef00 \
		-N4 -t4:8305 "$1"
}

if [ ! "$MMC" ] || [ "$MMC" = "0" ]; then
	MMC=0 # SD Card
	UBOOT_MMC=1
	IMAGE_NAME_EXTRA="_sd"
elif [ "$MMC" = "1" ]; then
	UBOOT_MMC=0
	IMAGE_NAME_EXTRA="_emmc"
else
	echo "Wrong MMC variable"
	exit 1
fi

# Note: needs a TARBALL environment variable

do_fill_image() {
	pushd p4
		echo "Unpacking system distribution ..."
		tar xfpa "${TARBALL}" --strip-components=1

		echo "Generating aosc-arm.conf ..."
		mkdir -p etc/
		echo "/dev/mmcblk${MMC}p3 / btrfs compress=zstd,ssd 1 1" >> etc/fstab
		echo "DEVICE_NAME=$DEVICE_NAME" > etc/aosc-arm.conf
		echo "FLASHER_SOLUTION=rockchip" >> etc/aosc-arm.conf
		echo "RK_FIRMWARE_DEVICE=/dev/mmcblk${MMC}" >> etc/aosc-arm.conf
		echo "RK_KERNEL_DEVICE=/dev/mmcblk${MMC}p3" >> etc/aosc-arm.conf

		# For u-boot-aosc-utils
		echo "Downloading u-boot configurations ..."
		mkdir -p etc/default
		if [ "$MMC" = "1" ]; then
			wget https://github.com/AOSC-Dev/u-boot-aosc-utils/raw/584ede55ce34300d2b3cb4adb587e87bc28e0aff/presets/rk64-emmc -O etc/default/u-boot
		else
			wget https://github.com/AOSC-Dev/u-boot-aosc-utils/raw/584ede55ce34300d2b3cb4adb587e87bc28e0aff/presets/rk64-sd -O etc/default/u-boot
		fi
	popd
	pushd p3
		echo "Deploying Kernel image ..."
		cp -v ../p4/usr/lib/aosc-os-arm64-rockchip-boot/linux-kernel-rk64/Image .
		cp -v ../p4/usr/lib/aosc-os-arm64-rockchip-boot/dtb-${DEVICE_NAME}/dtb.dtb .

		echo "Generating boot.cmd ..."
		cat > boot.cmd << EOF
load mmc ${UBOOT_MMC}:3 0x02080000 Image
load mmc ${UBOOT_MMC}:3 0x01f00000 dtb.dtb
setenv bootargs console=ttyS2,1500000 console=tty0 root=/dev/mmcblk${MMC}p4 rootwait earlyprintk panic=10
booti 0x02080000 - 0x01f00000
EOF

		echo "Generating boot.scr ..."
		mkimage -C none -A arm -T script -d boot.cmd boot.scr
	popd

	echo "Writing boot partitions ..."
	dd if=p4/usr/lib/aosc-os-arm64-rockchip-boot/u-boot-${DEVICE_NAME}/idbloader.img of="${IMAGE_DEVICE}" bs=512 seek=64
	dd if=p4/usr/lib/aosc-os-arm64-rockchip-boot/u-boot-${DEVICE_NAME}/u-boot.itb of="${IMAGE_DEVICE}" bs=512 seek=16384
}
