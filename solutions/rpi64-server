#!/bin/bash
IMAGE_TOTAL_SIZE=7168

FIRST_PARTITION_TYPE=vfat
SECOND_PARTITION_TYPE=ext4

# No partition sizes defined here - see GDISK_COMMANDS below.

DEPENDENCIES="arch-chroot qemu-user-static"

case $DEVICE_NAME in
	"rpi-3")
		FULL_DEVICE_NAME="Raspberry Pi 3rd Gen"
		;;
	"rpi-4")
		FULL_DEVICE_NAME="Raspberry Pi 4th Gen"
		;;
	*)
		echo "[-] Unsupported device: $DEVICE_NAME"
		return 1
		;;
esac

function GDISK_COMMANDS() {
	echo "[+] Partitioning disk..."
	# Only Raspberry Pi 4th gen supports GPT boot - there's an embedded firmware which is upgradable.
	# Raspberry Pi 3rd gen does not - their burnt-in Boot ROM does not support GPT.
	# Don't think about Protective MBR - it is too tricky and risky.
	case "$DEVICE_NAME" in
		"rpi-3")
			echo "[+] Using MBR partition table."
			echo -e "label: dos\nstart=2048,type=0c,bootable,size=200MiB,\ntype=83," | sfdisk $1
			;;
		*)
			echo "[+] Using GPT partition table."
			echo -e "label: gpt\nstart=2048,type=uefi,size=200MiB,\ntype=linux," | sfdisk $1
			;;
	esac
}

# Note: needs a TARBALL environment variable

do_fill_image() {
	pushd p2
		echo "[+] Unpacking system distribution ..."
		tar xfpa "${TARBALL}" --strip-components=1

		# Generate fstab
		echo "[+] Generating fstab..."
		BOOT_PARTUUID="$(lsblk -no PARTUUID ${IMAGE_DEVICE}p1)"
		ROOT_PARTUUID="$(lsblk -no PARTUUID ${IMAGE_DEVICE}p2)"
		
		echo -e "PARTUUID=${ROOT_PARTUUID}\t/\text4\trw,relatime\t0 1" >> etc/fstab
		echo -e "PARTUUID=${BOOT_PARTUUID}\t/boot/rpi\tvfat\trw,relatime,fmask=0022,dmask=0022,codepage=437,iocharset=iso8859-1,shortname=mixed,utf8,errors=remount-ro \t0 2" >> etc/fstab

		echo "[+] Generating aosc-arm.conf ..."
		echo "DEVICE_NAME=$DEVICE_NAME" > etc/aosc-arm.conf
		echo "FULL_DEVICE_NAME=$FULL_DEVICE_NAME" >> etc/aosc-arm.conf
	popd
	pushd p1
		echo "[+] Copying firmware and kernel..."
		cp -rv ../p2/usr/lib/rpi64/boot/* ./
		cp -rv ../p2/usr/lib/rpi64/kernel/* ./
		echo "[+] Generating config.txt ..."
		cp -v ../p2/usr/lib/rpi64/config/config.txt ./
		echo "[+] Generating distcfg.txt..."
		cp -v ../p2/usr/lib/rpi64/config/distcfg.txt ./
		echo "[+] Generating cmdline.txt..."
		ROOT_PARTUUID="$(lsblk -no PARTUUID ${IMAGE_DEVICE}p2)"
		echo "console=serial0,115200 console=tty1 rw root=PARTUUID=${ROOT_PARTUUID} fsck.repair=yes rootwait" | tee cmdline.txt
	popd
	echo "[+] Done."
}
